// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package eventSchemaHandler

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventWrapper struct {
	_tab flatbuffers.Table
}

func GetRootAsEventWrapper(buf []byte, offset flatbuffers.UOffsetT) *EventWrapper {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventWrapper{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventWrapperBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEventWrapper(buf []byte, offset flatbuffers.UOffsetT) *EventWrapper {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventWrapper{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventWrapperBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EventWrapper) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventWrapper) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EventWrapper) ClubId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventWrapper) Event() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EventWrapper) PayloadType() Payload {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Payload(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *EventWrapper) MutatePayloadType(n Payload) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *EventWrapper) Payload(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func EventWrapperStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EventWrapperAddClubId(builder *flatbuffers.Builder, clubId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(clubId), 0)
}
func EventWrapperAddEvent(builder *flatbuffers.Builder, event flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(event), 0)
}
func EventWrapperAddPayloadType(builder *flatbuffers.Builder, payloadType Payload) {
	builder.PrependByteSlot(2, byte(payloadType), 0)
}
func EventWrapperAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(payload), 0)
}
func EventWrapperEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
