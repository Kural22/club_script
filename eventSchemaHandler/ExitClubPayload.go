// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package eventSchemaHandler

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ExitClubPayload struct {
	_tab flatbuffers.Table
}

func GetRootAsExitClubPayload(buf []byte, offset flatbuffers.UOffsetT) *ExitClubPayload {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExitClubPayload{}
	x.Init(buf, n+offset)
	return x
}

func FinishExitClubPayloadBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsExitClubPayload(buf []byte, offset flatbuffers.UOffsetT) *ExitClubPayload {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ExitClubPayload{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedExitClubPayloadBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ExitClubPayload) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExitClubPayload) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ExitClubPayload) UserIds(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ExitClubPayload) UserIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExitClubPayload) MutateUserIds(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func ExitClubPayloadStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func ExitClubPayloadAddUserIds(builder *flatbuffers.Builder, userIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(userIds), 0)
}
func ExitClubPayloadStartUserIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExitClubPayloadEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
